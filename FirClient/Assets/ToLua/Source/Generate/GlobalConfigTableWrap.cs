//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GlobalConfigTableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GlobalConfigTable), typeof(System.Object));
		L.RegFunction("Initialize", new LuaCSFunction(Initialize));
		L.RegFunction("GetItems", new LuaCSFunction(GetItems));
		L.RegFunction("AddItem", new LuaCSFunction(AddItem));
		L.RegFunction("GetItemByKey", new LuaCSFunction(GetItemByKey));
		L.RegFunction("New", new LuaCSFunction(_CreateGlobalConfigTable));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.RegVar("name", new LuaCSFunction(get_name), new LuaCSFunction(set_name));
		L.RegVar("Items", new LuaCSFunction(get_Items), null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGlobalConfigTable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GlobalConfigTable obj = new GlobalConfigTable();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GlobalConfigTable.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalConfigTable obj = (GlobalConfigTable)ToLua.CheckObject<GlobalConfigTable>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItems(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalConfigTable obj = (GlobalConfigTable)ToLua.CheckObject<GlobalConfigTable>(L, 1);
			System.Collections.Generic.List<GlobalConfigTableItem> o = obj.GetItems();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalConfigTable obj = (GlobalConfigTable)ToLua.CheckObject<GlobalConfigTable>(L, 1);
			GlobalConfigTableItem arg0 = (GlobalConfigTableItem)ToLua.CheckObject<GlobalConfigTableItem>(L, 2);
			obj.AddItem(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemByKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalConfigTable obj = (GlobalConfigTable)ToLua.CheckObject<GlobalConfigTable>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GlobalConfigTableItem o = obj.GetItemByKey(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GlobalConfigTable obj = (GlobalConfigTable)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Items(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GlobalConfigTable obj = (GlobalConfigTable)o;
			System.Collections.Generic.List<GlobalConfigTableItem> ret = obj.Items;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Items on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GlobalConfigTable obj = (GlobalConfigTable)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}
}

