//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DG_Tweening_LoopTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(DG.Tweening.LoopType));
		L.RegVar("Restart", new LuaCSFunction(get_Restart), null);
		L.RegVar("Yoyo", new LuaCSFunction(get_Yoyo), null);
		L.RegVar("Incremental", new LuaCSFunction(get_Incremental), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<DG.Tweening.LoopType>.Check = CheckType;
		StackTraits<DG.Tweening.LoopType>.Push = Push;
	}

	static void Push(IntPtr L, DG.Tweening.LoopType arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_DG_Tweening_LoopType = typeof(DG.Tweening.LoopType);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_DG_Tweening_LoopType, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Restart(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LoopType.Restart);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Yoyo(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LoopType.Yoyo);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Incremental(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LoopType.Incremental);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		DG.Tweening.LoopType o = (DG.Tweening.LoopType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

