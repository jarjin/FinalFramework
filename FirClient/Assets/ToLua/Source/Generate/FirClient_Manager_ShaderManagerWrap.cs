//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FirClient_Manager_ShaderManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FirClient.Manager.ShaderManager), typeof(FirClient.Manager.BaseManager));
		L.RegFunction("LoadShaders", new LuaCSFunction(LoadShaders));
		L.RegFunction("AddShader", new LuaCSFunction(AddShader));
		L.RegFunction("GetShader", new LuaCSFunction(GetShader));
		L.RegFunction("New", new LuaCSFunction(_CreateFirClient_Manager_ShaderManager));
		L.RegFunction("__tostring", new LuaCSFunction(ToLua.op_ToString));
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFirClient_Manager_ShaderManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FirClient.Manager.ShaderManager obj = new FirClient.Manager.ShaderManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FirClient.Manager.ShaderManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShaders(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				FirClient.Manager.ShaderManager obj = (FirClient.Manager.ShaderManager)ToLua.CheckObject<FirClient.Manager.ShaderManager>(L, 1);
				obj.LoadShaders();
				return 0;
			}
			else if (count == 2)
			{
				FirClient.Manager.ShaderManager obj = (FirClient.Manager.ShaderManager)ToLua.CheckObject<FirClient.Manager.ShaderManager>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.LoadShaders(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: FirClient.Manager.ShaderManager.LoadShaders");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			FirClient.Manager.ShaderManager obj = (FirClient.Manager.ShaderManager)ToLua.CheckObject<FirClient.Manager.ShaderManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Shader arg1 = (UnityEngine.Shader)ToLua.CheckObject<UnityEngine.Shader>(L, 3);
			obj.AddShader(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			FirClient.Manager.ShaderManager obj = (FirClient.Manager.ShaderManager)ToLua.CheckObject<FirClient.Manager.ShaderManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Shader o = obj.GetShader(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

