//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_RectTransform_AxisWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.RectTransform.Axis));
		L.RegVar("Horizontal", new LuaCSFunction(get_Horizontal), null);
		L.RegVar("Vertical", new LuaCSFunction(get_Vertical), null);
		L.RegFunction("IntToEnum", new LuaCSFunction(IntToEnum));
		L.EndEnum();
		TypeTraits<UnityEngine.RectTransform.Axis>.Check = CheckType;
		StackTraits<UnityEngine.RectTransform.Axis>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.RectTransform.Axis arg)
	{
		ToLua.Push(L, arg);
	}

	static Type TypeOf_UnityEngine_RectTransform_Axis = typeof(UnityEngine.RectTransform.Axis);

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(TypeOf_UnityEngine_RectTransform_Axis, L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Horizontal(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.RectTransform.Axis.Horizontal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Vertical(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.RectTransform.Axis.Vertical);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tointeger(L, 1);
		UnityEngine.RectTransform.Axis o = (UnityEngine.RectTransform.Axis)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

